/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aspuser;
import java.awt.Dimension;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import java.lang.Runtime;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author selin
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author selin
 */

  static boolean isSticky = false;
     public String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getText();
            }
        }

        return null;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea(100,5100);
        fileChooser = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<String>();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();


        jScrollPane1.setViewportView(jTextArea1);

        fileChooser.setDialogTitle("Select File");
        fileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SMPTI Solver", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 0))); // NOI18N


        jLabel2.setText("      Select optimization");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Optimization", "Sex Equal", "Egalitarian", "Min Regret", "Max Cardinality", " " }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });


        textArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(textArea);

        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Use sticky stability");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(143, 143, 143))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()))))
                        .addGap(0, 148, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>
   File file;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        List<String> lines = new ArrayList<String>();
        String s="";
        s = textArea.getText();
        lines = Arrays.asList(s.split("\n"));
        if(jCheckBox1.isSelected())
                  isSticky =true;

        String command="null";
        String m = "";
       if(jCheckBox1.isSelected())
           m = "clingo input.lp codes/sticky-smpti-v3.lp";
       else
           m = "clingo input.lp codes/smpti.lp";

        if(jComboBox1.getSelectedItem()=="No Optimization")
           command = m + " 0";
       else if(jComboBox1.getSelectedItem()=="Sex Equal")
          command =  m + " codes/sexequal.lp";
        else if(jComboBox1.getSelectedItem()=="Min Regret")
          command = m + " codes/minregret.lp";
        else if(jComboBox1.getSelectedItem()=="Egalitarian")
          command = m + " codes/egalitarian.lp";
        else if(jComboBox1.getSelectedItem()=="Max Cardinality")
          command = m + " codes/maxcardinality.lp";

        solveSMP(lines,"",command);

   JOptionPane.showMessageDialog(this, "Result can be read from result.txt");
    }

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

    }

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
    if (returnVal == fileChooser.APPROVE_OPTION) {
        file = fileChooser.getSelectedFile();
        try {
          // What to do with the file, e.g. display it in a TextArea
          textArea.read( new FileReader( file.getAbsolutePath() ), null );
        } catch (IOException ex) {
          System.out.println("problem accessing file"+file.getAbsolutePath());
        }
    } else {
        System.out.println("File access cancelled by user.");
    }
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        System.exit(0);
    }

    public static void solveSMP(List<String> lines,String filename, String command) {


         boolean isRank = false;
         int m_size = Integer.parseInt(lines.get(0));
         int w_size = Integer.parseInt(lines.get(1));


          int offset = 0;

          if(isSticky)
          {
            offset = m_size + w_size;
            if(lines.size() != 2*m_size + 2*w_size + 2 )
            {isRank=true;}
          }
          else
            {
              if(lines.size() != m_size + w_size + 2 )
            {isRank=true;}
          }


         ArrayList<String> k_w = new ArrayList<String>();
         ArrayList<String> k_m = new ArrayList<String>();
         BufferedWriter bw = null;
         FileWriter fw = null;

          try {
              fw = new FileWriter("input.lp");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }

         bw = new BufferedWriter(fw);

        if(isSticky){
         for(int i=0; i<m_size;i++)
        {
           String k=lines.get(i + 2);
           k_m.add(k);
        }
         for(int i=0; i<w_size;i++)
        {
           String k=lines.get(i + m_size + 2);
           k_w.add(k);
        }
         for(int i=0;i<m_size;i++)
               try {
                   fw.write("k_man("+String.valueOf(i+1)+","+k_m.get(i)+").\n");
               }
               catch (IOException ex) {
                   Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
               }
          try {
              fw.write("\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }

          for(int i=0;i<w_size;i++)
               try {
                   fw.write("k_woman("+(i+1)+","+k_w.get(i)+").\n");
               } catch (IOException ex) {
                   Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
               }
          try {
              fw.write("\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }}


          try {
              fw.write("man(1.."+m_size+").\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
          try {
              fw.write("woman(1.."+w_size+").\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }


      if (isRank){

          ArrayList<List<Tuple>> m_ranklists= new ArrayList<List<Tuple>>();
          ArrayList<List<Tuple>> w_ranklists= new ArrayList<List<Tuple>>();

        int total_sum = 0;
        for(int i=0; i< m_size;i++)
        {
           String k=lines.get(2 + offset + total_sum); //size of list
           String rev=new StringBuilder(k).toString();
           int len = Integer.parseInt(k);

          List<Tuple> ranklist=new ArrayList<Tuple>();
          for (int t=1;t<len+1;t++)
          {
             String l=lines.get(2 + offset + total_sum + t);
             String[] ranks = l.split(" ");
             ranklist.add(new Tuple(Integer.parseInt(ranks[0]),Integer.parseInt(ranks[1])));
          }
           m_ranklists.add(ranklist);
           total_sum+=len + 1;
        }


     for(int i=0; i< w_size;i++)
        {
           String k=lines.get(2 + offset + total_sum); //size of list
           String rev=new StringBuilder(k).toString();
           int len = Integer.parseInt(k);

          List<Tuple> ranklist=new ArrayList<Tuple>();
          for (int t=1;t<len+1;t++)
          {
             String l=lines.get(2 + offset + total_sum + t);
             String[] ranks = l.split(" ");
             ranklist.add(new Tuple(Integer.parseInt(ranks[0]),Integer.parseInt(ranks[1])));
          }
           w_ranklists.add(ranklist);
            total_sum+=len + 1;
        }


      for(int i=0; i<m_size;i++)
          for(int k=0;k<m_ranklists.get(i).size();k++)
               try {
                   fw.write("mrank("+(i + 1)+","+m_ranklists.get(i).get(k).getx()+","+m_ranklists.get(i).get(k).gety()+").\n");
               } catch (IOException ex) {
                   Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
               }
          try {
              fw.write("\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
        for(int i=0; i<w_size;i++)
          for(int k=0;k<w_ranklists.get(i).size();k++)
               try {
                   fw.write("wrank("+(i + 1)+","+w_ranklists.get(i).get(k).getx()+","+w_ranklists.get(i).get(k).gety()+").\n");
               } catch (IOException ex) {
                   Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
               }
          try {
              fw.write("\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }


          try {
              fw.close();
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }}

      else if(!isRank){
     int m_maxLen = 0;
     int w_maxLen = 0;

     for(int i=2;i<m_size+2;i++ )
     {
         if(lines.get(i).length() > m_maxLen)
           m_maxLen = lines.get(i).length();
     }
      for(int i=m_size+2;i<w_size+m_size+2;i++ )
     {
         if(lines.get(i).length() > w_maxLen)
           w_maxLen = lines.get(i).length();
     }


   ArrayList<List<Tuple>> m_preflists= new ArrayList<List<Tuple>>();
     int curr;
        for(int i=0; i< m_size;i++)
        {
           String k=lines.get(i + 2 + offset);
           String rev=new StringBuilder(k).toString();
           String [] split_gt = rev.split(" ");
           curr = 1;
          List<Tuple> ranklist=new ArrayList<Tuple>();
          for (int t=0;t<split_gt.length;t++)
          {
             String outer_split= split_gt[t];
             Matcher o=Pattern.compile("\\{([\\d]+,)+[\\d]+\\}").matcher(outer_split);
             boolean is_tie=false;
              while(o.find())
              {
                 is_tie=true;
                 String inner_split = o.group();
                 String[] ties = inner_split.split(",");
                 for(String tie: ties)
                 {
                 tie = tie.replace("{","").replace("}", "");
                 Tuple tup= new Tuple(Integer.parseInt(tie),curr);
                 ranklist.add(tup);
                 }
              }

             if(!is_tie){
                  Tuple tup= new Tuple(Integer.parseInt(outer_split),curr);
                  ranklist.add(tup);
             }
              curr += 1;

          }
           m_preflists.add(ranklist);
        }

         ArrayList<List<Tuple>> w_preflists= new ArrayList<List<Tuple>>();

        curr=0;
        for(int i=0; i< m_size;i++)
        {
           String k=lines.get(i + 2 + offset + m_size);
           String rev=new StringBuilder(k).toString();
           String [] split_gt = rev.split(" ");
           curr = 1;

          List<Tuple> preflist=new ArrayList<Tuple>();
          for (int w=0;w<split_gt.length;w++)
          {
             String outer_split= split_gt[w];
             Matcher o=Pattern.compile("\\{([\\d]+,)+[\\d]+\\}").matcher(outer_split);
              boolean is_tie=false;
              while(o.find())
              {
                  is_tie = true;
                 String inner_split = o.group(1);
                 String[] ties = inner_split.split(",");
                 for(String tie: ties)
                 {
                  tie = tie.replace("{","").replace("}", "");
                 Tuple t = new Tuple(Integer.parseInt(tie),curr);
                 preflist.add(t);
                 }
              }

             if(!is_tie)
             {
                 Tuple t = new Tuple(Integer.parseInt(outer_split),curr);
                 preflist.add(t);
             }
           curr += 1;

          }
             w_preflists.add(preflist);
        }

      for(int i=0; i<m_size;i++)
          for(int k=0;k<m_preflists.get(i).size();k++)
               try {
                   fw.write("mrank("+(i + 1)+","+m_preflists.get(i).get(k).getx()+","+m_preflists.get(i).get(k).gety()+").\n");
               } catch (IOException ex) {
                   Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
               }
          try {
              fw.write("\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
        for(int i=0; i<w_size;i++)
          for(int k=0;k<w_preflists.get(i).size();k++)
               try {
                   fw.write("wrank("+(i + 1)+","+w_preflists.get(i).get(k).getx()+","+w_preflists.get(i).get(k).gety()+").\n");
               } catch (IOException ex) {
                   Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
               }
          try {
              fw.write("\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }

          try {
              bw.close();
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
          try {
              fw.close();
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
      }



    List<String> li= new ArrayList<String>(Arrays.asList(command.split(" ")));
    ProcessBuilder builder = new ProcessBuilder(li);
    builder.redirectErrorStream(true);
     String[] match=null;
      long start = System.nanoTime();
          try {
              Process p = builder.start();
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
      Runtime rt = Runtime.getRuntime();
      Process pr=null;
          try {
              pr = rt.exec(command);
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
      BufferedReader stdInput = new BufferedReader(new InputStreamReader(pr.getInputStream()));
      long end = System.nanoTime();

       String line=null;
          try {
              line = stdInput.readLine();
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
       String output="";

       while (line != null)
       {
           output+=line+"\n";
          try {
              line=stdInput.readLine();
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
       }

      String[] _lines = output.split("\n");

      for(int i=0;i<_lines.length;i++)
      {
          if(_lines[i].equals("OPTIMUM FOUND"))
          {
              match=_lines[i-2].split(" ");
              String[] optval= _lines[i-1].split(" ");
              double seconds = (double)(end-start) / 1000000000.0;
              //System.out.println("running time: " +seconds+ " seconds\noptimization:"+optval[1]);
              break;
          }
            }
             String resultfile = "result.txt";
             FileWriter rw = null;
          try {
              rw = new FileWriter(resultfile);

          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
             bw = null;
       bw = new BufferedWriter(rw);
        System.out.println(output);
        for(int i=0;i<_lines.length;i++)
      {
          if(_lines[i].equals("SATISFIABLE"))
          {
               match=_lines[i-1].split(" ");
               double seconds = (double)(end-start) / 1000000000.0;
              //System.out.println("running time: " +seconds+ " seconds\n");
           break;
          }
  }
          try {
              bw.write("  "+"M"+"    "+"W \n" );
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }

      boolean isMatching = false;
      if(match != null)
      for(int w=0;w<match.length;w++)
    {
      String word=match[w];
     if(word.length() >= 5)
      if(word.substring(0,5).equals("marry"))
      {
          isMatching = true;
          String[] arr=word.substring(6,9).split(",");
          try {
              bw.write("  "+ arr[0] + "    " + arr[1] + "\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
       }

  }
      if(!isMatching)
      try {
          bw.write("Matching is empty.\n");
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
         try {
              bw.close();
          } catch (IOException ex) {
              Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }

    }
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (jCheckBox1.isSelected())
        isSticky = true;
        else
        isSticky = false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        boolean isCmd = false;
        int opt_var = 0;

        if(args[0].length() > 1){isCmd = true;}
        if(isCmd){
          isSticky = false;
          opt_var = 0;
          String filename = args[0];
          if(!args[1].isEmpty())
          opt_var = Integer.parseInt(args[1]);
          if(!args[2].isEmpty() && Integer.parseInt(args[2]) == 1)
                isSticky = true;

          String command= "";
          String m = "";
             if(isSticky)
                 m = "clingo input.lp codes/sticky-smpti-v3.lp";
             else
                 m = "clingo input.lp codes/smpti.lp";

              if(opt_var == 0)
                  command = m + " 0";
             else if(opt_var == 1)
                command =  m + " codes/sexequal.lp 0";
              else if(opt_var == 2)
                command = m + " codes/minregret.lp 0";
              else if(opt_var == 3)
                command = m + " codes/egalitarian.lp 0";
              else if(opt_var == 4)
                command = m + " codes/maxcardinality.lp 0";

        ArrayList<String> lines = new ArrayList<String>();
        try {
         File file = new File(filename);
         FileReader inFile = new  FileReader(file.getAbsolutePath());
         BufferedReader inStream = new BufferedReader(inFile);
         String inString;

         while ((inString = inStream.readLine()) != null) {
           lines.add(inString);
         }
         inStream.close();
           }catch (IOException e) {
               e.printStackTrace();
           }
          solveSMP(lines, filename, command);
        }
        else{
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              NewJFrame f = new NewJFrame();
              f.setSize(500,400);
              f.setVisible(true);
            }
        });
    }
}
    // Variables declaration - do not modify
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea textArea;
    // End of variables declaration
}
class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Text documents (*.txt)";
        }
    }
